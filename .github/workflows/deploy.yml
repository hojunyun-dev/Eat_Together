name: Java CI with Gradle
#전체 흐름:dev 브랜치 → 빌드 → JAR 생성 → EC2 업로드 → EC2에서 실행 과정을 자동화

# 0. workflow 실행 트리거
on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
#dev브랜치에 코드가 합쳐질 때마다 자동 빌드와 배포가 진행됨
jobs:
  # 1. 빌드
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1-1. repository checkout
      - uses: actions/checkout@v4  #브랜치에서 값을 읽어드리기 위한 모듈
      # 1-2. jdk 환경 설치
      - name: Set up JDK 17 #자바 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      # 1-3. '*.properties' 파일 세팅
      # 1-4. gradle 환경 설치
      - name: Setup Gradle #그래들 설치
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      # 1-5. 빌드
      - name: Build with Gradle Wrapper #그래들을 통하여 우리 프로젝트를 빌드
        run: ./gradlew clean build #gradlew로 우리 프로젝트 빌드
      # 1-6. 빌드된 파일 이름 변경
      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./app.jar #임시서버
      # 1-7. 빌드 및 이름 변경된 cicdtest.jar 파일 EC2 전송
      - name: SCP로 EC2에 빌드된 파일 전송하기 #파일을 전송하는 장치
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: app.jar
          target: /home/ubuntu

  # 2. 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 2-1. EC2 접속 및 jar 파일 실행
      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            sudo fuser -k -n tcp 8080 || true
            sudo nohup java -jar cicdtest.jar > ./output.log 2>&1 &