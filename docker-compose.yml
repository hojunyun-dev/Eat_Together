version: '3.8' # 최신 버전으로 업데이트

services:
  # 당신의 Spring Boot Application
  eat-together-app:
    build: . # 현재 디렉토리에 Dockerfile이 있다고 가정합니다.
    container_name: eat_together
    ports:
      - "8080:8080"
    networks:
      - monitoring
    depends_on:
      redis:
        condition: service_started
      mysql:
        condition: service_healthy  # MySQL 이 완전히 작동된 후 실행
    environment:
      # application.yml에서 설정된 Redis 호스트와 포트는 그대로 사용합니다.
      - spring.data.redis.host=redis
      - spring.data.redis.port=${REDIS_PORT}
      # MySQL 환경 변수 (application.yml과 일치하도록 설정)
      - spring.datasource.url=jdbc:mysql://mysql:${MYSQL_PORT}/${MYSQL_DBNAME} # 'mysql' 서비스 이름 사용
      - spring.datasource.username=${MYSQL_USERNAME}
      - spring.datasource.password=${MYSQL_PASSWORD}
    env_file:
      - .env

  # MySQL 데이터베이스 서비스 추가
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DBNAME}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - monitoring
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ] # MySQL 서버가 응답하는지 확인
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # 시작 후 30초 동안은 실패해도 재시도

  # MySQL Exporter를 위한 새로운 서비스
  mysqld_exporter:
    image: prom/mysqld-exporter
    container_name: mysqld_exporter
    ports:
      - "9104:9104"
    depends_on:
      - mysql
    command:
      - "--mysqld.username=${MYSQL_USERNAME}:${MYSQL_PASSWORD}"
      - "--mysqld.address=mysql:${MYSQL_PORT}"
    networks:
      - monitoring

  # Prometheus 모니터링 시스템
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
    ports:
      - "9090:9090"
    networks:
      - monitoring
    depends_on:
      - redis-exporter
      - eat-together-app
      - mysqld_exporter

  # Grafana 시각화 도구
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana_data:/var/lib/grafana
    networks:
      - monitoring

  # Redis 캐시 서버 서비스
  redis:
    image: redis:7.0-alpine
    container_name: redis-cache
    networks:
      - monitoring

  # Redis 지표를 Prometheus 형식으로 변환해주는 Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    command: --redis.addr=redis:6379
    depends_on:
      - redis
    networks:
      - monitoring
    ports:
      - "9121:9121"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "22181:2181"
    networks:
      - monitoring

  kafka1:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - monitoring

  kafka2:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - zookeeper
    ports:
      - "19093:19093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9093,EXTERNAL://localhost:19093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - monitoring

  kafka3:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - zookeeper
    ports:
      - "19094:19094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9094,EXTERNAL://localhost:19094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - monitoring

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8989:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  grafana_data:
  mysql_data: # MySQL 데이터 영속성을 위한 볼륨 정의