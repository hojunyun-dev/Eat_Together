version: '3.8'

services:
  # Spring Boot 애플리케이션
  eat-together-app:
    build: .
    container_name: eat_together
    ports:
      - "8080:8080"
    networks:
      - monitoring
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    environment:
      - spring.data.redis.host=redis
      - spring.data.redis.port=${REDIS_PORT}
      - spring.datasource.url=jdbc:mysql://mysql:${MYSQL_PORT}/${MYSQL_DBNAME}
      - spring.datasource.username=${MYSQL_USERNAME}
      - spring.datasource.password=${MYSQL_PASSWORD}
      - spring.elasticsearch.uris=http://elasticsearch:9200
    env_file:
      - .env
    labels:
      co.elastic.logs/enabled: "true"


  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DBNAME}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - monitoring
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis 캐시 서버
  redis:
    image: redis:7.0-alpine
    container_name: redis-cache
    networks:
      - monitoring
    ports:
      - "6379:6379"

  # Elasticsearch 검색 엔진 (Nori 플러그인 포함)
  elasticsearch:
    build:
      context: .
      dockerfile: Dockerfile.elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes: # volumes 미설정 시 프로그램 시작 시 마다 ES Index가 날아가 검색 불가
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - monitoring

  # Elasticsearch 인덱스 초기화
  init-elasticsearch:
    image: curlimages/curl:7.83.1
    container_name: init_elasticsearch
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - monitoring
    command: >
      sh -c "
        until curl --silent --fail http://elasticsearch:9200/_cluster/health > /dev/null; do
          echo 'Waiting for Elasticsearch to be fully ready...';
          sleep 5;
        done;
      
        curl -X PUT 'http://elasticsearch:9200/store' -H 'Content-Type: application/json' -d '{
          \"settings\": {
            \"analysis\": {
              \"tokenizer\": {
                \"nori_tokenizer\": {
                  \"type\": \"nori_tokenizer\",
                  \"decompound_mode\": \"mixed\"
                }
              },
              \"analyzer\": {
                \"nori\": {
                  \"type\": \"custom\",
                  \"tokenizer\": \"nori_tokenizer\",
                  \"filter\": [
                    \"lowercase\"
                  ]
                }
              }
            }
          },
          \"mappings\": {
            \"properties\": {
              \"id\": {
                \"type\": \"keyword\"
              },
              \"normalizationName\": {
                \"type\": \"text\",
                \"analyzer\": \"nori\"
              }
            }
          }
        }'
      "


  # 모니터링 스택
  mysqld_exporter:
    image: prom/mysqld-exporter
    container_name: mysqld_exporter
    ports:
      - "9104:9104"
    depends_on:
      - mysql
    command:
      - "--mysqld.username=${MYSQL_USERNAME}:${MYSQL_PASSWORD}"
      - "--mysqld.address=mysql:${MYSQL_PORT}"
    networks:
      - monitoring

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    command: --redis.addr=redis:6379
    depends_on:
      - redis
    networks:
      - monitoring
    ports:
      - "9121:9121"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
    ports:
      - "9090:9090"
    networks:
      - monitoring
    depends_on:
      - redis-exporter
      - eat-together-app
      - mysqld_exporter

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana_data:/var/lib/grafana
    networks:
      - monitoring

  # kibana 추가
  kibana:
    image: docker.elastic.co/kibana/kibana:8.18.1   # ES와 동일 버전 사용
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      # 알림/모니터링·리포팅·보안 세션용 암호화 키 (각 32자 이상) 아래 키가 없으면 모니터링 불가
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: ${KIBANA_ENCRYPTED_SAVED_OBJECTS_KEY}
      XPACK_REPORTING_ENCRYPTIONKEY: ${KIBANA_REPORTING_KEY}
      XPACK_SECURITY_ENCRYPTIONKEY: ${KIBANA_SECURITY_KEY}
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - monitoring

  # Filebeat (로그 수집기) 추가
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.18.1
    container_name: filebeat
    user: root
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - monitoring
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro   # Filebeat 설정(읽기전용)
      - filebeat-data:/usr/share/filebeat/data                         # 레지스트리(오프셋) 영속화
      - /var/lib/docker/containers:/var/lib/docker/containers:ro       # 도커 컨테이너 로그 경로
      - /var/run/docker.sock:/var/run/docker.sock                      # 도커 오토디스커버용 소켓
    command: [ "-e", "--strict.perms=false" ]        # -e: stdout 로깅, 권한 체크 완화

networks:
  monitoring:
    driver: bridge

volumes:
  grafana_data:
  mysql_data:
  filebeat-data:
  esdata: