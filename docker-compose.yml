version: '3.8' # 최신 버전으로 업데이트

services:
  # 당신의 Spring Boot Application
  eat-together-app:
    build: . # 현재 디렉토리에 Dockerfile이 있다고 가정합니다.
    container_name: eat_together
    ports:
      - "8080:8080"
    networks:
      - monitoring
    depends_on:
      - redis # Redis가 먼저 시작되도록 의존성 추가
      - mysql # MySQL이 먼저 시작되도록 의존성 추가
    environment:
      # application.yml에서 설정된 Redis 호스트와 포트는 그대로 사용합니다.
      # Docker Compose 환경에서 Redis 컨테이너는 'redis'라는 이름으로 접근 가능합니다.
      - spring.data.redis.host=redis
      - spring.data.redis.port=6379
      # MySQL 환경 변수 (application.yml과 일치하도록 설정)
      - spring.datasource.url=jdbc:mysql://mysql:${MYSQL_PORT}/eat # 'mysql' 서비스 이름 사용
      - spring.datasource.username=${MYSQL_USERNAME}
      - spring.datasource.password=${MYSQL_PASSWORD}
    env_file:
      - .env

  # MySQL 데이터베이스 서비스 추가
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DBNAME}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - monitoring

  # MySQL Exporter를 위한 새로운 서비스
  mysqld_exporter:
    image: prom/mysqld-exporter
    container_name: mysqld_exporter
    ports:
      - "9104:9104"
    depends_on:
      - mysql
    command:
      - "--mysqld.username=root:12345"
      - "--mysqld.address=mysql:3306"
    networks:
      - monitoring

  # Prometheus 모니터링 시스템
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
    ports:
      - "9090:9090"
    networks:
      - monitoring
    depends_on:
      - redis-exporter
      - eat-together-app
      - mysqld_exporter


  # Grafana 시각화 도구
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring

  # Redis 캐시 서버 서비스
  redis:
    image: redis:7.0-alpine
    container_name: redis-cache
    networks:
      - monitoring

  # Redis 지표를 Prometheus 형식으로 변환해주는 Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    command: --redis.addr=redis:6379
    depends_on:
      - redis
    networks:
      - monitoring
    ports:
      - "9121:9121"

networks:
  monitoring:
    driver: bridge

volumes:
  grafana_data:
  mysql_data: # MySQL 데이터 영속성을 위한 볼륨 정의